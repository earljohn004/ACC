#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Thread.h>
#include <ThreadController.h>
#include <millisDelay.h>

#include "Message.h"
#include "CommonDefines.h"
#include "Settings.h"
#include "Panel.h"

char keyInput_;


LiquidCrystal_I2C lcd (0x27, 20, 4); // LCD address to 0x27: 16 chars 2 rows
Keypad keypad = Keypad ( makeKeymap(keys), rowPins, colPins, ROWS, COLUMN);
Settings setting;

Thread displayInitThread = Thread();

Thread stateThread = Thread();
Thread inputThread = Thread();
ThreadController control = ThreadController();

millisDelay testDelay;
millisDelay test2Delay;
millisDelay test3Delay;

bool display1 = true;
bool display2 = false;
bool display3 = false;


bool displayEnable = true;
bool display2Enable = true;

Panel initialize_screen = Panel(3);

void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();

  // Separate state machine logic on separate thread
  stateThread.onRun(state_machine_run);
  stateThread.setInterval(200);

  inputThread.onRun(getKeypadInput);
  inputThread.setInterval(300);

  displayInitThread.onRun(displayInitState);
  displayInitThread.setInterval(100);

  control.add(&stateThread);
  control.add(&inputThread);
  control.add(&displayInitThread);

  testDelay.start(1000);
  test2Delay.start(2000);
  test3Delay.start(3000);

  display_initialize_screen();

}

void loop() {
  initialize_screen.run(lcd);
  //control.run();          //run the thread
  //setDisplay("earL",LCDROW1);
  //state_machine_run();
}


void getKeypadInput(){
  keyInput_ = keypad.getKey();
}

void state_machine_run(){
    switch(state){
        case ST_INIT:
            //displayInitState();
            displayEnable = true;
            if(keyInput_){
                state = ST_INPUT;
            }
            break;
        case ST_INPUT:
            if(display2Enable == true){
//              lcd.clear();
            }
            setDisplay(MSG_NORMAL_INPUTSTATE, LCDROW2);
            displayEnable = false;
            display2Enable = false;
            if(keyInput_ == 'A'){
                state = ST_INIT;
                display2Enable=true;
            }
            break;
        case ST_COINSLOT:
            break;
        case ST_OUTPUT:
            break;
    }
}

void testPanel(){
      display1 = false;
      display2 = true;
      display3 = false;
      testDelay.repeat();
      //lcd.clear();
      setDisplay(MSG_NORMAL_INITIALIZE_WELCOME,LCDROW1);
      setDisplay(setting.getCafeNameSetting(),LCDROW2);
      Serial.println("screen1");
}

void display_initialize_screen(){
    initialize_screen.add(MSG_NORMAL_INITIALIZE_WELCOME, setting.getCafeNameSetting(), setting.getTransitionSetting(), 0);
    initialize_screen.add(MSG_NORMAL_INITIALIZE_SELECTPC, MSG_NORMAL_INITIALIZE_KEYPAD, setting.getTransitionSetting(), 1);
    initialize_screen.add(MSG_NORMAL_INITIALIZE_SELECT_TOP, MSG_NORMAL_INITIALIZE_SELECT_BOT, setting.getTransitionSetting(), 2);
};

void displayInitState(){

  if(displayEnable == true ){
    if( display1 && testDelay.justFinished()){
      display1 = false;
      display2 = true;
      display3 = false;
      testDelay.repeat();
      //lcd.clear();
      setDisplay(MSG_NORMAL_INITIALIZE_WELCOME,LCDROW1);
      setDisplay(setting.getCafeNameSetting(),LCDROW2);
      Serial.println("screen1");
    }
  
    if( display2 && testDelay.justFinished()){
      display1 = false;
      display2 = false;
      display3 = true;
      testDelay.repeat();
      //lcd.clear();
      setDisplay(MSG_NORMAL_INITIALIZE_SELECTPC,LCDROW1);
      setDisplay(MSG_NORMAL_INITIALIZE_KEYPAD,LCDROW2);
      Serial.println("screen2");
    }
  
    if( display3 && testDelay.justFinished()){
      display1 = true;
      display2 = false;
      display3 = false;
      testDelay.repeat();
      //lcd.clear();
      setDisplay(MSG_NORMAL_INITIALIZE_SELECT_TOP,LCDROW1);
      setDisplay(MSG_NORMAL_INITIALIZE_SELECT_BOT,LCDROW2);
      Serial.println("screen3");
    }
  }
}


void setDisplay(char* message, int row){
  // Compute the centerpoint of display in Row1
  int cursor = (LCDMAX - strlen(message))/2;

  //lcd.setCursor(cursor,row);
 //lcd.print(message);
}
